
package com.example.excelprocessor.service;

import com.example.excelprocessor.model.ExcelRecord;
import com.example.excelprocessor.model.phoneconfirm.PhoneConfirmRequest;
import com.example.excelprocessor.model.phoneconfirm.PhoneConfirmResponse;
import com.example.excelprocessor.model.trustscore.TrustScoreRequest;
import com.example.excelprocessor.model.trustscore.TrustScoreResponse;
import com.example.excelprocessor.model.upsert.UpsertRequest;
import com.example.excelprocessor.model.upsert.UpsertResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;

@Service
@RequiredArgsConstructor
@Slf4j
public class ExcelService {

    private final RestTemplate restTemplate;

    @Value("${application.payfoneTrustScoreUrl}")
    private String payfoneTrustScoreUrl;

    @Value("${application.payfoneUpsertUrl}")
    private String payfoneUpsertUrl;

    @Value("${application.phoneConfirmUrl}")
    private String phoneConfirmUrl;

    @Value("${application.eventName}")
    private String eventName;

    public ByteArrayInputStream processExcel(MultipartFile file) throws IOException {
        try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {
            Sheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rows = sheet.iterator();

            // Get the header
            Row headerRow = rows.next();
            int statusCellIndex = headerRow.getLastCellNum();
            Cell statusHeaderCell = headerRow.createCell(statusCellIndex);
            statusHeaderCell.setCellValue("Status");

            // Process records (max 100)
            int recordCount = 0;
            List<ExcelRecord> records = new ArrayList<>();

            while (rows.hasNext() && recordCount < 100) {
                Row row = rows.next();
                ExcelRecord record = mapRowToRecord(row);
                
                if (record.getAccountNumber() == null || record.getPhoneNumber() == null) {
                    log.warn("Skipping row {} due to missing mandatory fields", row.getRowNum());
                    Cell statusCell = row.createCell(statusCellIndex);
                    statusCell.setCellValue("Missing mandatory fields");
                    continue;
                }

                // Process this record
                processRecord(record);
                
                // Update status in Excel
                Cell statusCell = row.createCell(statusCellIndex);
                statusCell.setCellValue(record.getStatus());
                
                records.add(record);
                recordCount++;
            }

            // Write the workbook to ByteArrayOutputStream
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            workbook.write(outputStream);
            return new ByteArrayInputStream(outputStream.toByteArray());
        }
    }

    private ExcelRecord mapRowToRecord(Row row) {
        ExcelRecord record = new ExcelRecord();
        
        // Get cell values safely
        record.setAccountNumber(getCellValue(row.getCell(0)));
        record.setPhoneNumber(getCellValue(row.getCell(1)));
        
        String lineType = getCellValue(row.getCell(2));
        if (lineType != null && !lineType.trim().isEmpty()) {
            record.setLineType(lineType);
        }
        
        String confirmed = getCellValue(row.getCell(3));
        if (confirmed != null && !confirmed.trim().isEmpty()) {
            record.setConfirmed(Boolean.parseBoolean(confirmed));
        }
        
        record.setSsn(getCellValue(row.getCell(4)));
        record.setDob(getCellValue(row.getCell(5)));
        
        String channelId = getCellValue(row.getCell(6));
        if (channelId != null && !channelId.trim().isEmpty()) {
            record.setChannelId(channelId);
        }
        
        return record;
    }

    private String getCellValue(Cell cell) {
        if (cell == null) {
            return null;
        }
        
        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue();
            case NUMERIC:
                if (DateUtil.isCellDateFormatted(cell)) {
                    return cell.getLocalDateTimeCellValue().format(DateTimeFormatter.ISO_DATE);
                }
                return String.valueOf((long) cell.getNumericCellValue());
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            default:
                return null;
        }
    }

    private void processRecord(ExcelRecord record) {
        log.info("Processing record: {}", record);
        
        // Step 1: Call PayfoneTrustScore API
        TrustScoreResponse trustScoreResponse = callPayfoneTrustScoreApi(record);
        if (trustScoreResponse == null || 
            trustScoreResponse.getCslStatus() == null || 
            "CSLPFTS0106".equals(trustScoreResponse.getCslStatus().getCode())) {
            
            record.setStatus("Prove Whitelisting needed");
            log.info("Record requires whitelisting: {}", record.getAccountNumber());
            return;
        }
        
        // Step 2: Call Payfone Upsert API
        UpsertResponse upsertResponse = callPayfoneUpsertApi(record, trustScoreResponse);
        if (upsertResponse == null || 
            upsertResponse.getResponse() == null || 
            !"EDLMYSQLUP000".equals(upsertResponse.getResponse().getCode()) || 
            !"Success".equals(upsertResponse.getResponse().getMessage())) {
            
            record.setStatus("Failure at insert stage");
            log.info("Record failed at insert stage: {}", record.getAccountNumber());
            return;
        }
        
        // Step 3: Call Phone Confirm API
        PhoneConfirmResponse phoneConfirmResponse = callPhoneConfirmApi(record);
        if (phoneConfirmResponse == null || 
            phoneConfirmResponse.getPhoneDetails() == null || 
            !phoneConfirmResponse.getPhoneDetails().isConfirmed()) {
            
            record.setStatus("Failure at Phone Confirm Api Stage");
            log.info("Record failed at phone confirm stage: {}", record.getAccountNumber());
            return;
        }
        
        // All steps completed successfully
        record.setStatus("Success");
        log.info("Record processed successfully: {}", record.getAccountNumber());
    }

    private TrustScoreResponse callPayfoneTrustScoreApi(ExcelRecord record) {
        try {
            log.info("Calling PayfoneTrustScore API for account: {}", record.getAccountNumber());
            
            TrustScoreRequest request = new TrustScoreRequest();
            request.getHeader().setTransID("test" + UUID.randomUUID().toString().substring(0, 8));
            request.getTrustScoreRequest().setPhoneNumber(record.getPhoneNumber());
            
            log.info("PayfoneTrustScore request: {}", request);
            TrustScoreResponse response = restTemplate.postForObject(payfoneTrustScoreUrl, request, TrustScoreResponse.class);
            log.info("PayfoneTrustScore response: {}", response);
            
            return response;
        } catch (Exception e) {
            log.error("Error calling PayfoneTrustScore API", e);
            return null;
        }
    }

    private UpsertResponse callPayfoneUpsertApi(ExcelRecord record, TrustScoreResponse trustScoreResponse) {
        try {
            log.info("Calling PayfoneUpsert API for account: {}", record.getAccountNumber());
            
            UpsertRequest request = new UpsertRequest();
            request.setTransid("Insert" + UUID.randomUUID().toString().substring(0, 8));
            request.setEventName(eventName);
            request.setEventTimestamp(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
            
            UpsertRequest.RequestBody requestBody = request.getRequest();
            requestBody.setAccountnumber(record.getAccountNumber());
            requestBody.setPayfoneid(record.getPhoneNumber());
            requestBody.setPhonenumber(record.getPhoneNumber());
            requestBody.setLineType(record.getLineType());
            requestBody.setVerified(record.getConfirmed() ? "TRUE" : "FALSE");
            
            // Set SSN (default if not provided)
            if (record.getSsn() != null && !record.getSsn().trim().isEmpty()) {
                requestBody.setSsn(record.getSsn());
            }
            
            // Set DOB (default if not provided)
            if (record.getDob() != null && !record.getDob().trim().isEmpty()) {
                requestBody.setDob(record.getDob());
            }
            
            log.info("PayfoneUpsert request: {}", request);
            UpsertResponse response = restTemplate.postForObject(payfoneUpsertUrl, request, UpsertResponse.class);
            log.info("PayfoneUpsert response: {}", response);
            
            return response;
        } catch (Exception e) {
            log.error("Error calling PayfoneUpsert API", e);
            return null;
        }
    }

    private PhoneConfirmResponse callPhoneConfirmApi(ExcelRecord record) {
        try {
            log.info("Calling PhoneConfirm API for account: {}", record.getAccountNumber());
            
            PhoneConfirmRequest request = new PhoneConfirmRequest();
            request.getBody().setAccount(record.getAccountNumber());
            request.getBody().setPhoneNumber(record.getPhoneNumber());
            request.getBody().setPayfoneId(record.getPhoneNumber());
            
            // Set SSN (default if not provided)
            if (record.getSsn() != null && !record.getSsn().trim().isEmpty()) {
                request.getBody().setSsn(record.getSsn());
            }
            
            // Set DOB (default if not provided)
            if (record.getDob() != null && !record.getDob().trim().isEmpty()) {
                request.getBody().setDateOfBirth(record.getDob());
            }
            
            request.getHeader().setTransId("Testing" + UUID.randomUUID().toString().substring(0, 8));
            
            log.info("PhoneConfirm request: {}", request);
            PhoneConfirmResponse response = restTemplate.postForObject(phoneConfirmUrl, request, PhoneConfirmResponse.class);
            log.info("PhoneConfirm response: {}", response);
            
            return response;
        } catch (Exception e) {
            log.error("Error calling PhoneConfirm API", e);
            return null;
        }
    }
}
